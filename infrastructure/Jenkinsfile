pipeline {
    agent any
            tools {
                   jdk 'jdk21' // This name must match the JDK installation name used in Jenkins Global Tool Configuration
            }
    environment {
        DOCKER_PASSWORD = credentials("docker_password")
        GITHUB_TOKEN = credentials("GITHUB_TOKEN")
    }

    stages {
        stage('Build & Test') {
        tools {
            jdk 'jdk21' // This name must match the JDK installation name used in Jenkins Global Tool Configuration
        }
            steps {
                sh './gradlew clean build'
            }
        }
        stage('Tag image') {
              tools {
               jdk 'jdk21' // This name must match the JDK installation name used in Jenkins Global Tool Configuration
              }
              steps {
                script {
                    env.GIT_TAG = sh([script: 'git fetch --tag && git tag', returnStdout: true]).trim()
                    env.MAJOR_VERSION = sh([script: 'git tag | sort --version-sort | tail -1 | cut -d . -f 1', returnStdout: true]).trim()
                    env.MINOR_VERSION = sh([script: 'git tag | sort --version-sort | tail -1 | cut -d . -f 2', returnStdout: true]).trim()
                    env.PATCH_VERSION = sh([script: 'git tag | sort --version-sort | tail -1 | cut -d . -f 3', returnStdout: true]).trim()
                    env.IMAGE_TAG = "${env.MAJOR_VERSION}.\$((${env.MINOR_VERSION} + 1)).${env.PATCH_VERSION}"
                }
                sh "docker build -t drgprodeng/hello-img:${env.IMAGE_TAG} ."
                sh "git tag ${env.IMAGE_TAG}"
                sh "git push https://${GITHUB_TOKEN}@github.com/SlashPol/service.git ${env.IMAGE_TAG}"
              }
        }
        stage('Image'){
            steps {
                sh "IMAGE_TAG=${env.IMAGE_TAG} docker compose up -d hello mongo"
            }
        }
    }

}
